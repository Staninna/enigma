use std::fmt;

#[derive(Debug, PartialEq, Clone, Copy)]
pub enum Input {
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
}

impl Input {
    pub fn next(&self) -> Self {
        match self {
            Input::A => Input::B,
            Input::B => Input::C,
            Input::C => Input::D,
            Input::D => Input::E,
            Input::E => Input::F,
            Input::F => Input::G,
            Input::G => Input::H,
            Input::H => Input::I,
            Input::I => Input::J,
            Input::J => Input::K,
            Input::K => Input::L,
            Input::L => Input::M,
            Input::M => Input::N,
            Input::N => Input::O,
            Input::O => Input::P,
            Input::P => Input::Q,
            Input::Q => Input::R,
            Input::R => Input::S,
            Input::S => Input::T,
            Input::T => Input::U,
            Input::U => Input::V,
            Input::V => Input::W,
            Input::W => Input::X,
            Input::X => Input::Y,
            Input::Y => Input::Z,
            Input::Z => Input::A,
        }
    }

    pub fn prev(&self) -> Self {
        match self {
            Input::A => Input::Z,
            Input::B => Input::A,
            Input::C => Input::B,
            Input::D => Input::C,
            Input::E => Input::D,
            Input::F => Input::E,
            Input::G => Input::F,
            Input::H => Input::G,
            Input::I => Input::H,
            Input::J => Input::I,
            Input::K => Input::J,
            Input::L => Input::K,
            Input::M => Input::L,
            Input::N => Input::M,
            Input::O => Input::N,
            Input::P => Input::O,
            Input::Q => Input::P,
            Input::R => Input::Q,
            Input::S => Input::R,
            Input::T => Input::S,
            Input::U => Input::T,
            Input::V => Input::U,
            Input::W => Input::V,
            Input::X => Input::W,
            Input::Y => Input::X,
            Input::Z => Input::Y,
        }
    }

    pub fn from_char(c: char) -> Self {
        match c {
            'A' => Input::A,
            'B' => Input::B,
            'C' => Input::C,
            'D' => Input::D,
            'E' => Input::E,
            'F' => Input::F,
            'G' => Input::G,
            'H' => Input::H,
            'I' => Input::I,
            'J' => Input::J,
            'K' => Input::K,
            'L' => Input::L,
            'M' => Input::M,
            'N' => Input::N,
            'O' => Input::O,
            'P' => Input::P,
            'Q' => Input::Q,
            'R' => Input::R,
            'S' => Input::S,
            'T' => Input::T,
            'U' => Input::U,
            'V' => Input::V,
            'W' => Input::W,
            'X' => Input::X,
            'Y' => Input::Y,
            'Z' => Input::Z,
            _ => panic!("Invalid input character"),
        }
    }

    pub fn to_char(&self) -> char {
        match self {
            Input::A => 'A',
            Input::B => 'B',
            Input::C => 'C',
            Input::D => 'D',
            Input::E => 'E',
            Input::F => 'F',
            Input::G => 'G',
            Input::H => 'H',
            Input::I => 'I',
            Input::J => 'J',
            Input::K => 'K',
            Input::L => 'L',
            Input::M => 'M',
            Input::N => 'N',
            Input::O => 'O',
            Input::P => 'P',
            Input::Q => 'Q',
            Input::R => 'R',
            Input::S => 'S',
            Input::T => 'T',
            Input::U => 'U',
            Input::V => 'V',
            Input::W => 'W',
            Input::X => 'X',
            Input::Y => 'Y',
            Input::Z => 'Z',
        }
    }
}

impl From<u8> for Input {
    fn from(input: u8) -> Self {
        match input {
            0 => Input::A,
            1 => Input::B,
            2 => Input::C,
            3 => Input::D,
            4 => Input::E,
            5 => Input::F,
            6 => Input::G,
            7 => Input::H,
            8 => Input::I,
            9 => Input::J,
            10 => Input::K,
            11 => Input::L,
            12 => Input::M,
            13 => Input::N,
            14 => Input::O,
            15 => Input::P,
            16 => Input::Q,
            17 => Input::R,
            18 => Input::S,
            19 => Input::T,
            20 => Input::U,
            21 => Input::V,
            22 => Input::W,
            23 => Input::X,
            24 => Input::Y,
            25 => Input::Z,
            _ => panic!("Invalid input value"),
        }
    }
}

impl From<Input> for u8 {
    fn from(input: Input) -> Self {
        match input {
            Input::A => 0,
            Input::B => 1,
            Input::C => 2,
            Input::D => 3,
            Input::E => 4,
            Input::F => 5,
            Input::G => 6,
            Input::H => 7,
            Input::I => 8,
            Input::J => 9,
            Input::K => 10,
            Input::L => 11,
            Input::M => 12,
            Input::N => 13,
            Input::O => 14,
            Input::P => 15,
            Input::Q => 16,
            Input::R => 17,
            Input::S => 18,
            Input::T => 19,
            Input::U => 20,
            Input::V => 21,
            Input::W => 22,
            Input::X => 23,
            Input::Y => 24,
            Input::Z => 25,
        }
    }
}

impl fmt::Display for Input {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Input::A => write!(f, "A"),
            Input::B => write!(f, "B"),
            Input::C => write!(f, "C"),
            Input::D => write!(f, "D"),
            Input::E => write!(f, "E"),
            Input::F => write!(f, "F"),
            Input::G => write!(f, "G"),
            Input::H => write!(f, "H"),
            Input::I => write!(f, "I"),
            Input::J => write!(f, "J"),
            Input::K => write!(f, "K"),
            Input::L => write!(f, "L"),
            Input::M => write!(f, "M"),
            Input::N => write!(f, "N"),
            Input::O => write!(f, "O"),
            Input::P => write!(f, "P"),
            Input::Q => write!(f, "Q"),
            Input::R => write!(f, "R"),
            Input::S => write!(f, "S"),
            Input::T => write!(f, "T"),
            Input::U => write!(f, "U"),
            Input::V => write!(f, "V"),
            Input::W => write!(f, "W"),
            Input::X => write!(f, "X"),
            Input::Y => write!(f, "Y"),
            Input::Z => write!(f, "Z"),
        }
    }
}
